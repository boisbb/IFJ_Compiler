<prog> -> <body>
<body> -> EPSilon
<body> -> <command> EOL <body>
<command> -> ID = <asssignment>
<command> -> fct( <fct_call>
<command> -> <predef_fct_call>
<command> -> def <fction_start>
<command> -> expression
<command> -> if <statement>
<command> -> while <statement>
<command> -> epsilon
<assignment> -> expression
<assignment> -> fct( <fct_call>
<assignment> -> <predef_fct>
<statement> -> if expression : EOL INDENT <statement_body> EOL DEDENT else : EOL INDENT <statement_body>
<statement> -> if expression : EOL INDENT <statement_body>
<statement_else> -> else : EOL INDENT <statement_body>
<statement_else> -> epsilon
<statement> -> while expression : EOL INDENT <statement_body>
<statement_body> -> <command> <statement_body>
<statement_body> -> EOL DEDENT
<fction_call> -> ID <arg_n> )
<arg_n> -> , ID <arg_n>
<arg_n> -> epsilon
<fction_start> -> fction_name( ID <arg_n> ): EOL <fction_body>  INDENT
<fction_body> -> <command> EOL <fction_body>
<fction_body> -> epsilon
<predef_fct> -> inputs()
<predef_fct> -> inputi()
<predef_fct> -> inputf()
<predef_fct> -> print(<term>)
<predef_fct> -> len(ID)
<predef_fct> -> len(STR)
<predef_fct> -> substr(STR, INT, INT)
<predef_fct> -> ord(STR, INT)
<predef_fct> -> chr(INT)
<term> -> ID <term_n>
<term> -> <type> <term_n>
<type> -> STR
<type> -> INT
<type> -> CHAR
<term_n> -> , <term>
<term_n> -> epsilon


:::HEAD FOR TOOL:::
tokens:
a = fctionNAME(
b = :
c = )
d = ,
e = =

%token EOL INDENT DEDENT def a b end c d ID expression if else e while inputs inputi inputf print lenID lenSTR substr ord chr STR INT CHAR
%% /* LL(1) */
prog : body;
body : command EOL body ;
command : ID e assignment
        | a fct_call
        | predef_fct
        | def fction_start
        | expression
        | if statement
        | while statement
        | /* eps */ ;
assignment : expression
           | a fct_call
           | predef_fct ;
statement : if expression b EOL INDENT statement_body EOL DEDENT statement_else
          | while expression b EOL INDENT statement_body ;
statement_else : else b EOL INDENT statement_body
               | /* eps */ ;
statement_body : command EOL  statement_body
               |  DEDENT ;
fct_call : ID arg_n c ;
arg_n : d ID arg_n
      | /* eps */ ;
fction_start : a ID arg_n b c EOL fction_body INDENT ;
fction_body : command EOL fction_body
            | /* eps */ ;
predef_fct : inputs
           | inputi
           | print term
           | lenID
           | lenSTR
           | substr
           | ord
           | chr ;
term : ID term_n
     | type term_n ;
type : STR
     | INT
     | CHAR ;
term_n : d term
       | /* eps */ ;

---------------------------------------------------------------------------------------------------------------------------------------------------------
<fction_start> -> def fctionNAME(<arg> : EOL
<arg> -> ID <arg_n>)
<arg_n> -> , ID <args>
<statement> -> <if_statem>
<statement> -> <while_statem>
<if_statem> -> if expr : EOL INDENT <stat_command> EOL DEDENT else : EOL INDENT <stat_command> EOL DEDENT
<while_statem> -> while expr : EOL INDENT <stat_command> EOL DEDENT
<stat_command> -> EPSilon
<stat_command> -> <command> <stat_command>
<value> -> expr
<value> -> fctionNAME(<arg>
<value> -> inputs()
<value> -> inputi()
<value> -> inputf()
<value> -> print(<term>)
<value> -> len(ID)
<value> -> len(STR)
<value> -> substr(STR, INT, INT)
<value> -> ord(STR, INT)
<value> -> chr(INT)
<term> -> ID <term_n>
<term> -> <type> <term_n>
<type> -> STR
<type> -> INT
<type> -> CHAR
<term_n> -> , <term>
<term_n> -> EPSilon

:::HEAD FOR TOOL:::
tokens:
a = fctionNAME(
b = :
c = )
d = ,
e = =


%token EOL INDENT DEDENT def a b end c d ID expr if else e while inputs inputi inputf print lenID lenSTR substr ord chr STR INT CHAR
%% /* LL(1) */
prog : body
     | fction_start INDENT body DEDENT body ;
body : command EOL body ;
fction_start : def a arg b EOL ;
arg : ID arg_n c ;
arg_n : d ID arg_n
      | /* eps */ ;
command : statement
        | ID e value ;
statement : if_statem
          | while_statem ;
if_statem : if expr b EOL INDENT stat_command EOL DEDENT else b EOL INDENT stat_command EOL DEDENT ;
while_statem : while expr b EOL INDENT stat_command EOL DEDENT ;
stat_command : /* eps */
             | command stat_command ;
value : expr
      | a arg
      | inputs
      | inputi
      | print term
      | lenID
      | lenSTR
      | substr
      | ord
      | chr ;
term : ID term_n
     | type term_n ;
type : STR
     | INT
     | CHAR ;
term_n : d term
       | /* eps */ ;
